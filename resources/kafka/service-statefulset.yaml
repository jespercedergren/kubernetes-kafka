apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: kafka
  labels:
    component: kafka
spec:
  selector:
    component: kafka
  ports:
  - name: "kafka"
    protocol: TCP
    port: 9092
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: kafka
spec:
  selector:
    matchLabels:
      component: kafka
  serviceName: kafka-service
  replicas: 3
  #updateStrategy: RollingUpdate
  #podManagementPolicy: OrderedReady
  minReadySeconds: 10
  template:
    metadata:
      labels:
        component: kafka
    spec:
      affinity: # tells the Kubernetes Scheduler that it should never co-locate two Pods which have component label "kafka" in the domain defined by the topologyKey "kubernetes.io/hostname" which indicates that the domain is an individual node.
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "component"
                    operator: In
                    values:
                      - kafka
              topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 10
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:5.2.1
        ports:
          - containerPort: 9092
        envFrom:
          - configMapRef:
              name: kafka-config
        env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNAL_PLAINTEXT://$(MY_POD_IP):9092"
#        env:
#          - name: KAFKA_BROKER_ID
#            valueFrom:
#              fieldRef:
#                fieldPath: metadata.annotations['spec.pod.beta.kubernetes.io/statefulset-index']
        volumeMounts:
          - mountPath: "/var/lib/kafka/data"
            name: data
      restartPolicy: Always
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: efs-csi
      resources:
        requests:
          storage: 4Mi
